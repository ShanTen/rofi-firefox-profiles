#!/usr/bin/env python3

import os
import sys
import subprocess
import shutil
from pathlib import Path
import argparse
import configparser


def log_info(msg):
    print(f"[INFO] {msg}")


def log_warn(msg):
    print(f"[WARN] {msg}")


def log_error(msg):
    print(f"[ERROR] {msg}", file=sys.stderr)


def get_browser_from_xdg():
    try:
        desktop = (
            subprocess.check_output(
                ["xdg-mime", "query", "default", "x-scheme-handler/http"],
                stderr=subprocess.DEVNULL,
            )
            .decode()
            .strip()
        )

        log_info(f"xdg-mime default desktop entry: {desktop}")

        mapping = {
            "brave-browser.desktop": "brave",
            "firefox.desktop": "firefox",
            "zen.desktop": "zen-browser",
        }

        browser = mapping.get(desktop)
        if browser:
            log_info(f"resolved default browser from xdg: {browser}")
            return browser
    except Exception as e:
        log_warn(f"failed to resolve default browser from xdg-mime: {e}")
    return None


def detect_default_browser():
    browser = get_browser_from_xdg()
    if browser:
        return browser

    for browser in ["firefox", "brave", "zen-browser"]:
        if shutil.which(browser):
            log_info(f"fallback: found browser in $PATH: {browser}")
            return browser

    log_error("no supported browser found in system.")
    sys.exit(1)


def get_profile_dirs(browser, profile_base_path):
    if not profile_base_path.exists():
        log_error(f"profile base path not found: {profile_base_path}")
        sys.exit(1)

    return sorted(
        [
            p
            for p in profile_base_path.iterdir()
            if p.is_dir() and ("Default" in p.name or p.name.startswith("Profile"))
        ]
    )


def rofi_select(profiles, rofi_theme=None):
    input_str = "\n".join(p.name for p in profiles)
    rofi_cmd = ["rofi", "-dmenu", "-p", "select profile"]

    if rofi_theme:
        theme_path = Path(rofi_theme).expanduser()
        if theme_path.exists():
            rofi_cmd += ["-theme", str(theme_path)]
            log_info(f"using rofi theme: {theme_path}")
        else:
            log_warn(f"rofi theme not found: {theme_path}, using default")

    try:
        result = subprocess.run(
            rofi_cmd, input=input_str.encode(), capture_output=True, check=True
        )
        return result.stdout.decode().strip() or None
    except subprocess.CalledProcessError:
        log_warn("rofi selection cancelled or failed.")
        return None


def launch_browser(browser, profile_dir, browser_command=None):
    try:
        cmd = browser_command or browser
        if browser == "firefox":
            subprocess.Popen([cmd, "--profile", str(profile_dir)])
        elif browser == "zen-browser":
            subprocess.Popen([cmd, "--profile", str(profile_dir)])
        elif browser == "brave":
            # brave uses --profile-directory with just profile folder name
            subprocess.Popen([cmd, f"--profile-directory={profile_dir.name}"])
        else:
            # fallback to generic
            subprocess.Popen([cmd])
        log_info(f"launched {browser} with profile: {profile_dir.name}")
    except Exception as e:
        log_error(f"failed to launch {browser} with profile {profile_dir}: {e}")
        sys.exit(1)
    finally:
        os._exit(0)


def load_config(browser):
    config_path = Path.home() / ".config" / "rofi-firefox-profiles" / "config.ini"
    config = configparser.ConfigParser()
    config_data = {}

    if config_path.exists():
        config.read(config_path)

        # global settings
        global_section = "settings"
        if config.has_section(global_section):
            if config.has_option(global_section, "debug"):
                config_data["debug"] = config.getboolean(global_section, "debug")

        # per-browser settings
        if config.has_section(browser):
            if config.has_option(browser, "profile_search_path"):
                config_data["profile_base_path"] = Path(
                    os.path.expanduser(config.get(browser, "profile_search_path"))
                )
            if config.has_option(browser, "browser_command"):
                config_data["browser_command"] = config.get(browser, "browser_command")
            if config.has_option(browser, "rofi_theme"):
                config_data["rofi_theme"] = config.get(browser, "rofi_theme")

    return config_data


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--browser",
        choices=["firefox", "zen-browser", "brave"],
        help="which browser to launch (default: auto-detect)",
    )
    parser.add_argument("--rofi-theme", help="custom rofi theme .rasi file")
    parser.add_argument(
        "--profile-base-path", help="override browser profile directory"
    )
    args = parser.parse_args()

    browser = args.browser or detect_default_browser()
    log_info(f"using browser: {browser}")

    config = load_config(browser)

    default_paths = {
        "firefox": Path.home() / ".mozilla" / "firefox",
        "zen-browser": Path.home() / ".zen",
        "brave": Path.home() / ".config" / "BraveSoftware" / "Brave-Browser",
    }

    profile_base_path = (
        Path(os.path.expanduser(args.profile_base_path))
        if args.profile_base_path
        else config.get("profile_base_path", default_paths[browser])
    )

    rofi_theme = args.rofi_theme or config.get("rofi_theme")

    browser_command = config.get("browser_command")

    profiles = get_profile_dirs(browser, profile_base_path)
    if not profiles:
        log_error(f"no profiles found in {profile_base_path}")
        sys.exit(1)

    selected_name = rofi_select(profiles, rofi_theme)
    if not selected_name:
        log_info("no profile selected. exiting.")
        sys.exit(0)

    selected_profile = profile_base_path / selected_name
    if selected_profile.exists():
        launch_browser(browser, selected_profile, browser_command)
    else:
        log_error(f"selected profile not found: {selected_profile}")
        sys.exit(1)


if __name__ == "__main__":
    main()
